#include "gazebo/common/Exception.hh"
#include "gazebo/physics/World.hh"
#include "gazebo/physics/Model.hh"
#include "gazebo/physics/WorldState.hh"

using namespace gazebo;
using namespace physics;

/////////////////////////////////////////////////
DummyPerception::DummyPerception()
  : State()
{
}

/////////////////////////////////////////////////
DummyPerception::DummyPerception(const WorldPtr _world)
  : State(_world->GetName(), _world->GetSimTime(), _world->GetRealTime())
{
  
}

/////////////////////////////////////////////////
DummyPerception::DummyPerception(const sdf::ElementPtr _sdf)
  : State()
{
  
}

/////////////////////////////////////////////////
DummyPerception::~DummyPerception()
{
  
}

/////////////////////////////////////////////////
void DummyPerception::Load(const sdf::ElementPtr _elem)
{
  
}
/*
/////////////////////////////////////////////////
void WorldState::SetWorld(const WorldPtr _world)
{
 
}

/////////////////////////////////////////////////


/////////////////////////////////////////////////

/////////////////////////////////////////////////


/////////////////////////////////////////////////


/////////////////////////////////////////////////
bool WorldState::HasModelState(const std::string &_modelName) const
{
  
  return false;
}

/////////////////////////////////////////////////
bool WorldState::IsZero() const
{
 

  return result;
}

/////////////////////////////////////////////////
WorldState &WorldState::operator=(const WorldState &_state)
{
  
  return *this;
}

/////////////////////////////////////////////////
WorldState WorldState::operator-(const WorldState &_state) const
{
  WorldState result;

  return result;
}

/////////////////////////////////////////////////
WorldState WorldState::operator+(const WorldState &_state) const
{
  WorldState result;

  result.name = this->name;
  result.simTime = this->simTime;
  result.realTime = this->realTime;
  result.wallTime = this->wallTime;

  // Add the states.
  for (std::vector<ModelState>::const_iterator iter =
       _state.modelStates.begin(); iter != _state.modelStates.end(); ++iter)
  {
    ModelState state = this->GetModelState((*iter).GetName()) + *iter;
    result.modelStates.push_back(state);
  }

  return result;
}

/////////////////////////////////////////////////
void WorldState::FillSDF(sdf::ElementPtr _sdf)
{
  
}
*/
