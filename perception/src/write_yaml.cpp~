#include <ros/ros.h>
#include <fstream>
#include "yaml-cpp/yaml.h"
#include <iostream>
#include <string>
#include <vector>
#include <semantic_map/semantic_map.h>


struct Vec3 { int x; int y; int z; };
struct Position { double x; double y; double z; };
struct Orientation { double x; double y; double z; double w; };

struct Pose
{
    Position position;
    Orientation orientation;

};
struct Corner { double x; double y; double z; };
struct BoundingBox
{
    Corner one;
    Corner two;
    Corner three;
    Corner four;
    //Vec3 1;
    //Vec3 2;
    //Vec3 3;

};
struct Geometry
{
    Pose pose;
    BoundingBox bb;
    //Corner bb[4];

};
struct Semantics
{
    std::string category;
    std::string sub_category;
};
struct Object
{
    std::string instance;
    Geometry geometry;
    Semantics semantics;

};


namespace YAML {
template<>
struct convert<Corner> {
  static Node encode(const Corner& rhs) {
    Node node;
    node.push_back(rhs.x);
    node.push_back(rhs.y);
    node.push_back(rhs.z);
    return node;
  }

  static bool decode(const Node& node, Corner& rhs) {
    if(!node.IsSequence() || node.size() != 3) {
      return false;
    }

    rhs.x = node[0].as<double>();
    rhs.y = node[1].as<double>();
    rhs.z = node[2].as<double>();
    return true;
  }
};
}

/*
namespace YAML {
template<>
struct convert<Instance> {
  static Node encode(const Instance& rhs) {
    Node node;

    node = rhs.instance;

    return node;
  }
};
}*/


namespace YAML {
template<>
struct convert<BoundingBox> {
  static Node encode(const BoundingBox& rhs) {
    Node node;

    node["vertex-1"]["x"] = rhs.one.x;
    node["vertex-1"]["y"] = rhs.one.y;
    node["vertex-1"]["z"] = rhs.one.z;

    node["vertex-2"]["x"] = rhs.two.x;
    node["vertex-2"]["y"] = rhs.two.y;
    node["vertex-2"]["z"] = rhs.two.z;

    node["vertex-3"]["x"] = rhs.three.x;
    node["vertex-3"]["y"] = rhs.three.y;
    node["vertex-3"]["z"] = rhs.three.z;

    node["vertex-4"]["x"] = rhs.four.x;
    node["vertex-4"]["y"] = rhs.four.y;
    node["vertex-4"]["z"] = rhs.four.z;

    return node;
  }
};
}


namespace YAML {
template<>
struct convert<Geometry> {
  static Node encode(const Geometry& rhs) {
    Node node;
    
    ///////////////////////////////////////////////////////////////////    
    node["pose"]["position"]["x"] = rhs.pose.position.x;
    node["pose"]["position"]["y"] = rhs.pose.position.y;
    node["pose"]["position"]["z"] = rhs.pose.position.z;

    node["pose"]["orientation"]["x"] = rhs.pose.orientation.x;
    node["pose"]["orientation"]["y"] = rhs.pose.orientation.y;
    node["pose"]["orientation"]["z"] = rhs.pose.orientation.z;
    node["pose"]["orientation"]["w"] = rhs.pose.orientation.w;

    node["bounding_box"] = rhs.bb;

    return node;
  }
};
}

namespace YAML {
template<>
struct convert<Semantics> {
  static Node encode(const Semantics& rhs) {
    Node node;

    node["category"] = rhs.category;
    node["sub_category"] = rhs.sub_category;

    return node;
  }
};
}


namespace YAML {
template<>
struct convert<Object> {
  static Node encode(const Object& rhs) {
    Node node;

    node["instance"] = rhs.instance; 
    ///////////////////////////////////////////////////////////////////    
/*    node["geometry"]["pose"]["position"]["x"] = rhs.geometry.pose.position.x;
    node["geometry"]["pose"]["position"]["y"] = rhs.geometry.pose.position.y;
    node["geometry"]["pose"]["position"]["z"] = rhs.geometry.pose.position.z;

    node["geometry"]["pose"]["orientation"]["x"] = rhs.geometry.pose.orientation.x;
    node["geometry"]["pose"]["orientation"]["y"] = rhs.geometry.pose.orientation.y;
    node["geometry"]["pose"]["orientation"]["z"] = rhs.geometry.pose.orientation.z;
    node["geometry"]["pose"]["orientation"]["w"] = rhs.geometry.pose.orientation.w;

    ///////////////////////////////////////////////////////////////////    
    node["geometry"]["bounding_box"]["vertex-1"]["x"] = rhs.geometry.bb.one.x;
    node["geometry"]["bounding_box"]["vertex-1"]["y"] = rhs.geometry.bb.one.y;
    node["geometry"]["bounding_box"]["vertex-1"]["z"] = rhs.geometry.bb.one.z;

    node["geometry"]["bounding_box"]["vertex-2"]["x"] = rhs.geometry.bb.two.x;
    node["geometry"]["bounding_box"]["vertex-2"]["y"] = rhs.geometry.bb.two.y;
    node["geometry"]["bounding_box"]["vertex-2"]["z"] = rhs.geometry.bb.two.z;

    node["geometry"]["bounding_box"]["vertex-3"]["x"] = rhs.geometry.bb.three.x;
    node["geometry"]["bounding_box"]["vertex-3"]["y"] = rhs.geometry.bb.three.y;
    node["geometry"]["bounding_box"]["vertex-3"]["z"] = rhs.geometry.bb.three.z;

    node["geometry"]["bounding_box"]["vertex-4"]["x"] = rhs.geometry.bb.four.x;
    node["geometry"]["bounding_box"]["vertex-4"]["y"] = rhs.geometry.bb.four.y;
    node["geometry"]["bounding_box"]["vertex-4"]["z"] = rhs.geometry.bb.four.z;*/

    node["geometry"] = rhs.geometry;

    ///////////////////////////////////////////////////////////////////
    //node["semantics"]["category"] = rhs.semantics.category;
    //node["semantics"]["sub_category"] = rhs.semantics.sub_category;

    node["semantics"] = rhs.semantics;

    return node;
  }

  static bool decode(const Node& node, Object& rhs) {
//    if(!node.IsSequence() || node.size() != 3) {
//      return false;
//    }
	
    rhs.instance = node["instance"].as<std::string>(); 
    ///////////////////////////////////////////////////////////////////
    rhs.geometry = node["geometry"].as<double>();    

/*    rhs.geometry.pose.position.x = node["geometry"]["pose"]["position"]["x"].as<double>();
    rhs.geometry.pose.position.y = node["geometry"]["pose"]["position"]["y"].as<double>();
    rhs.geometry.pose.position.z = node["geometry"]["pose"]["position"]["z"].as<double>();

    rhs.geometry.pose.orientation.x = node["geometry"]["pose"]["orientation"]["x"].as<double>();
    rhs.geometry.pose.orientation.y = node["geometry"]["pose"]["orientation"]["y"].as<double>();
    rhs.geometry.pose.orientation.z = node["geometry"]["pose"]["orientation"]["z"].as<double>();
    rhs.geometry.pose.orientation.w = node["geometry"]["pose"]["orientation"]["w"].as<double>();

    ///////////////////////////////////////////////////////////////////    
    rhs.geometry.bb.one.x = node["geometry"]["bounding_box"]["vertex-1"]["x"].as<double>();
    rhs.geometry.bb.one.y = node["geometry"]["bounding_box"]["vertex-1"]["y"].as<double>();
    rhs.geometry.bb.one.z = node["geometry"]["bounding_box"]["vertex-1"]["z"].as<double>();

    rhs.geometry.bb.two.x = node["geometry"]["bounding_box"]["vertex-2"]["x"].as<double>();
    rhs.geometry.bb.two.y = node["geometry"]["bounding_box"]["vertex-2"]["y"].as<double>();
    rhs.geometry.bb.two.z = node["geometry"]["bounding_box"]["vertex-2"]["z"].as<double>();

    rhs.geometry.bb.three.x = node["geometry"]["bounding_box"]["vertex-3"]["x"].as<double>();
    rhs.geometry.bb.three.y = node["geometry"]["bounding_box"]["vertex-3"]["y"].as<double>();
    rhs.geometry.bb.three.z = node["geometry"]["bounding_box"]["vertex-3"]["z"].as<double>();

    rhs.geometry.bb.four.x = node["geometry"]["bounding_box"]["vertex-4"]["x"].as<double>();
    rhs.geometry.bb.four.y =node["geometry"]["bounding_box"]["vertex-4"]["y"].as<double>();
    rhs.geometry.bb.four.z = node["geometry"]["bounding_box"]["vertex-4"]["z"].as<double>();

    ///////////////////////////////////////////////////////////////////
    rhs.semantics.category = node["semantics"]["category"].as<std::string>();
    rhs.semantics.sub_category = node["semantics"]["sub_category"].as<std::string>();*/

    return true;
  }
};
}


int main(int argc, char** argv)
{
/*    YAML::Node node;  // starts out as null

    Object o1, o2;
    Geometry g1;
    //p1.x = 2;
    //p1.y = 4;
    //p1.z = 6;
    //node[0] = o1;//Vec3(2, -1, 0);
    //node[1] = o2;
    //o2 = node[0].as<Object>();
    //int i = node.size()+1;
    //node[i] = o2;
    //for(int i = 0; i < 10; i++)
    //{
    //    node.push_back(o1);
    //}

    //node[0][e.d"geometry"] = g1;
    node.push_back(o1); 
    node.push_back(o2); 

    //std::string instance = node[0]["instance"].as<std::string>();



    //std::cout << instance << '\n';

    std::ofstream fout("/home/niranjan/catkin_ws/src/inria_hbrs/perception/data/write_test.yaml");
    fout << node;
    // Initialize ROS
    //ros::init(argc, argv, "write_yaml_node");
    //ros::NodeHandle nh;
    //semantic_map::SemanticMap* semantic_map = new semantic_map::SemanticMap(nh);
    //semantic_map->createMap();*/

    YAML::Node node = YAML::LoadFile("/home/niranjan/catkin_ws/src/inria_hbrs/perception/data/test1.yaml");
    Object o1, o2;
    o2 = node[0].as<Object>();
    //semantic_map::Object object;
    //object = node.as<semantic_map::Object>();



}
