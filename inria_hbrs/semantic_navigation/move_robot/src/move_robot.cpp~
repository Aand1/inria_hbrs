/*********************************************************************
*
* Software License Agreement (BSD License)
*
* Copyright (c) 2008, Willow Garage, Inc.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
*
* * Redistributions of source code must retain the above copyright
* notice, this list of conditions and the following disclaimer.
* * Redistributions in binary form must reproduce the above
* copyright notice, this list of conditions and the following
* disclaimer in the documentation and/or other materials provided
* with the distribution.
* * Neither the name of the Willow Garage nor the names of its
* contributors may be used to endorse or promote products derived
* from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
* FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
* COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
* LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
* ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*
* Author: Niranjan Deshpande
*********************************************************************/

#include <move_robot/move_robot.h>

namespace move_robot {
	MoveRobot::MoveRobot(tf::TransformListener& tf) :
      tf_(tf),
      as_(NULL),
      planner_costmap_ros_(NULL), controller_costmap_ros_(NULL),
      bgp_loader_("nav_core", "nav_core::BaseGlobalPlanner"),
      blp_loader_("nav_core", "nav_core::BaseLocalPlanner"), 
      recovery_loader_("nav_core", "nav_core::RecoveryBehavior"),
      planner_plan_(NULL), latest_plan_(NULL), controller_plan_(NULL),
      runPlanner_(false), setup_(false), p_freq_change_(false), c_freq_change_(false), new_global_plan_(false) 
      {
        as_ = new MoveRobotActionServer(ros::NodeHandle(), "move_robot", boost::bind(&MoveRobot::executeCb, this, _1), false);

        ros::NodeHandle private_nh("~");
  		ros::NodeHandle nh;

    
	    //get some parameters that will be global to the move base node
	    std::string global_planner, local_planner;
	    private_nh.param("base_global_planner", global_planner, std::string("navfn/NavfnROS"));
	    private_nh.param("base_local_planner", local_planner, std::string("base_local_planner/TrajectoryPlannerROS"));
	    private_nh.param("global_costmap/robot_base_frame", robot_base_frame_, std::string("base_link"));
	    private_nh.param("global_costmap/global_frame", global_frame_, std::string("/map"));
	    private_nh.param("planner_frequency", planner_frequency_, 0.0);
	    private_nh.param("controller_frequency", controller_frequency_, 20.0);
	    private_nh.param("planner_patience", planner_patience_, 5.0);
	    private_nh.param("controller_patience", controller_patience_, 15.0);

	    private_nh.param("oscillation_timeout", oscillation_timeout_, 0.0);
	    private_nh.param("oscillation_distance", oscillation_distance_, 0.5);


	    //set up plan triple buffer
	    planner_plan_ = new std::vector<geometry_msgs::PoseStamped>();
	    latest_plan_ = new std::vector<geometry_msgs::PoseStamped>();
	    controller_plan_ = new std::vector<geometry_msgs::PoseStamped>();

	    //set up the planner's thread
	    planner_thread_ = new boost::thread(boost::bind(&MoveRobot::planThread, this));

	    //for comanding the base
	    vel_pub_ = nh.advertise<geometry_msgs::Twist>("cmd_vel", 1);
	    current_goal_pub_ = private_nh.advertise<geometry_msgs::PoseStamped>("current_goal", 0 );

	    ros::NodeHandle action_nh("move_robot");
	    action_goal_pub_ = action_nh.advertise<move_base_msgs::MoveBaseActionGoal>("goal", 1);

	    //we'll provide a mechanism for some people to send goals as PoseStamped messages over a topic
	    //they won't get any useful information back about its status, but this is useful for tools
	    //like nav_view and rviz
	    ros::NodeHandle simple_nh("move_robot_simple");
	    goal_sub_ = simple_nh.subscribe<geometry_msgs::PoseStamped>("goal", 1, boost::bind(&MoveRobot::goalCB, this, _1));

	    //we'll assume the radius of the robot to be consistent with what's specified for the costmaps
	    private_nh.param("local_costmap/inscribed_radius", inscribed_radius_, 0.325);
	    private_nh.param("local_costmap/circumscribed_radius", circumscribed_radius_, 0.46);
	    private_nh.param("clearing_radius", clearing_radius_, circumscribed_radius_);
	    private_nh.param("conservative_reset_dist", conservative_reset_dist_, 3.0);

	    private_nh.param("shutdown_costmaps", shutdown_costmaps_, false);
	    private_nh.param("clearing_rotation_allowed", clearing_rotation_allowed_, true);
	    private_nh.param("recovery_behavior_enabled", recovery_behavior_enabled_, true);

	    //create the ros wrapper for the planner's costmap... and initializer a pointer we'll use with the underlying map
	    planner_costmap_ros_ = new costmap_2d::Costmap2DROS("global_costmap", tf_);
	    planner_costmap_ros_->pause();

	    //initialize the global planner
	    try {
	      //check if a non fully qualified name has potentially been passed in
	      if(!bgp_loader_.isClassAvailable(global_planner)){
	        std::vector<std::string> classes = bgp_loader_.getDeclaredClasses();
	        for(unsigned int i = 0; i < classes.size(); ++i){
	          if(global_planner == bgp_loader_.getName(classes[i])){
	            //if we've found a match... we'll get the fully qualified name and break out of the loop
	            ROS_WARN("Planner specifications should now include the package name. You are using a deprecated API. Please switch from %s to %s in your yaml file.",
	                global_planner.c_str(), classes[i].c_str());
	            global_planner = classes[i];
	            break;
	          }
	        }
	      }

	      planner_ = bgp_loader_.createInstance(global_planner);
	      planner_->initialize(bgp_loader_.getName(global_planner), planner_costmap_ros_);
	    } catch (const pluginlib::PluginlibException& ex)
	    {
	      ROS_FATAL("Failed to create the %s planner, are you sure it is properly registered and that the containing library is built? Exception: %s", global_planner.c_str(), ex.what());
	      exit(1);
	    }

	    //create the ros wrapper for the controller's costmap... and initializer a pointer we'll use with the underlying map
	    controller_costmap_ros_ = new costmap_2d::Costmap2DROS("local_costmap", tf_);
	    controller_costmap_ros_->pause();

	    //create a local planner
	    try {
	      //check if a non fully qualified name has potentially been passed in
	      if(!blp_loader_.isClassAvailable(local_planner)){
	        std::vector<std::string> classes = blp_loader_.getDeclaredClasses();
	        for(unsigned int i = 0; i < classes.size(); ++i){
	          if(local_planner == blp_loader_.getName(classes[i])){
	            //if we've found a match... we'll get the fully qualified name and break out of the loop
	            ROS_WARN("Planner specifications should now include the package name. You are using a deprecated API. Please switch from %s to %s in your yaml file.",
	                local_planner.c_str(), classes[i].c_str());
	            local_planner = classes[i];
	            break;
	          }
	        }
	      }

	      tc_ = blp_loader_.createInstance(local_planner);
	      ROS_INFO("Created local_planner %s", local_planner.c_str());
	      tc_->initialize(blp_loader_.getName(local_planner), &tf_, controller_costmap_ros_);
	    } catch (const pluginlib::PluginlibException& ex)
	    {
	      ROS_FATAL("Failed to create the %s planner, are you sure it is properly registered and that the containing library is built? Exception: %s", local_planner.c_str(), ex.what());
	      exit(1);
	    }

	    // Start actively updating costmaps based on sensor data
	    planner_costmap_ros_->start();
	    controller_costmap_ros_->start();


	    //if we shutdown our costmaps when we're deactivated... we'll do that now
	    if(shutdown_costmaps_){
	      ROS_DEBUG_NAMED("move_base","Stopping costmaps initially");
	      planner_costmap_ros_->stop();
	      controller_costmap_ros_->stop();
	    }

	    //we're all set up now so we can start the action server
	    as_->start();

	    dsrv_ = new dynamic_reconfigure::Server<move_robot::MoveRobotConfig>(ros::NodeHandle("~"));
	    dynamic_reconfigure::Server<move_robot::MoveRobotConfig>::CallbackType cb = boost::bind(&MoveRobot::reconfigureCB, this, _1, _2);
	    dsrv_->setCallback(cb);

      }

	MoveRobot::~MoveRobot() {}

	void MoveRobot::reconfigureCB(move_robot::MoveRobotConfig &config, uint32_t level)
	{
		boost::recursive_mutex::scoped_lock l(configuration_mutex_);

	    //The first time we're called, we just want to make sure we have the
	    //original configuration
	    if(!setup_)
	    {
	      last_config_ = config;
	      default_config_ = config;
	      setup_ = true;
	      return;
	    }

	    if(config.restore_defaults) {
	      config = default_config_;
	      //if someone sets restore defaults on the parameter server, prevent looping
	      config.restore_defaults = false;
	    }

	    if(planner_frequency_ != config.planner_frequency)
	    {
	      planner_frequency_ = config.planner_frequency;
	      p_freq_change_ = true;
	    }

	    if(controller_frequency_ != config.controller_frequency)
	    {
	      controller_frequency_ = config.controller_frequency;
	      c_freq_change_ = true;
	    }

	    planner_patience_ = config.planner_patience;
	    controller_patience_ = config.controller_patience;
	    conservative_reset_dist_ = config.conservative_reset_dist;

	    
	    oscillation_timeout_ = config.oscillation_timeout;
	    oscillation_distance_ = config.oscillation_distance;
	    if(config.base_global_planner != last_config_.base_global_planner) {
	      boost::shared_ptr<nav_core::BaseGlobalPlanner> old_planner = planner_;
	      //initialize the global planner
	      ROS_INFO("Loading global planner %s", config.base_global_planner.c_str());
	      try {
	        //check if a non fully qualified name has potentially been passed in
	        if(!bgp_loader_.isClassAvailable(config.base_global_planner)){
	          std::vector<std::string> classes = bgp_loader_.getDeclaredClasses();
	          for(unsigned int i = 0; i < classes.size(); ++i){
	            if(config.base_global_planner == bgp_loader_.getName(classes[i])){
	              //if we've found a match... we'll get the fully qualified name and break out of the loop
	              ROS_WARN("Planner specifications should now include the package name. You are using a deprecated API. Please switch from %s to %s in your yaml file.",
	                  config.base_global_planner.c_str(), classes[i].c_str());
	              config.base_global_planner = classes[i];
	              break;
	            }
	          }
	        }

	        planner_ = bgp_loader_.createInstance(config.base_global_planner);

	        // wait for the current planner to finish planning
	        boost::unique_lock<boost::mutex> lock(planner_mutex_);

	        // Clean up before initializing the new planner
	        planner_plan_->clear();
	        latest_plan_->clear();
	        controller_plan_->clear();
	        resetState();
	        planner_->initialize(bgp_loader_.getName(config.base_global_planner), planner_costmap_ros_);

	        lock.unlock();
	      } catch (const pluginlib::PluginlibException& ex)
	      {
	        ROS_FATAL("Failed to create the %s planner, are you sure it is properly registered and that the containing library is built? Exception: %s", config.base_global_planner.c_str(), ex.what());
	        planner_ = old_planner;
	        config.base_global_planner = last_config_.base_global_planner;
	      }
	    }

	    if(config.base_local_planner != last_config_.base_local_planner){
	      boost::shared_ptr<nav_core::BaseLocalPlanner> old_planner = tc_;
	      //create a local planner
	      try {
	        //check if a non fully qualified name has potentially been passed in
	        ROS_INFO("Loading local planner: %s", config.base_local_planner.c_str());
	        if(!blp_loader_.isClassAvailable(config.base_local_planner)){
	          std::vector<std::string> classes = blp_loader_.getDeclaredClasses();
	          for(unsigned int i = 0; i < classes.size(); ++i){
	            if(config.base_local_planner == blp_loader_.getName(classes[i])){
	              //if we've found a match... we'll get the fully qualified name and break out of the loop
	              ROS_WARN("Planner specifications should now include the package name. You are using a deprecated API. Please switch from %s to %s in your yaml file.",
	                  config.base_local_planner.c_str(), classes[i].c_str());
	              config.base_local_planner = classes[i];
	              break;
	            }
	          }
	        }
	        tc_ = blp_loader_.createInstance(config.base_local_planner);
	        // Clean up before initializing the new planner
	        planner_plan_->clear();
	        latest_plan_->clear();
	        controller_plan_->clear();
	        resetState();
	        tc_->initialize(blp_loader_.getName(config.base_local_planner), &tf_, controller_costmap_ros_);
	      } catch (const pluginlib::PluginlibException& ex)
	      {
	        ROS_FATAL("Failed to create the %s planner, are you sure it is properly registered and that the containing library is built? Exception: %s", config.base_local_planner.c_str(), ex.what());
	        tc_ = old_planner;
	        config.base_local_planner = last_config_.base_local_planner;
	      }
	    }

    	last_config_ = config;


	}

	void MoveRobot::planThread()
	{
	    ROS_DEBUG_NAMED("move_robot_plan_thread","Starting planner thread...");
	    ros::NodeHandle n;
	    ros::Timer timer;
	    bool wait_for_wake = false;
	    boost::unique_lock<boost::mutex> lock(planner_mutex_);
    
	    while(n.ok())
	    {
	      //check if we should run the planner (the mutex is locked)
	      while(wait_for_wake || !runPlanner_)
	      {
	        //if we should not be running the planner then suspend this thread
	        ROS_DEBUG_NAMED("move_base_plan_thread","Planner thread is suspending");
	        planner_cond_.wait(lock);
	        wait_for_wake = false;
	      }

          ros::Time start_time = ros::Time::now();

	      //time to plan! get a copy of the goal and unlock the mutex
	      geometry_msgs::PoseStamped temp_goal = planner_goal_;
	      lock.unlock();
	      ROS_DEBUG_NAMED("move_base_plan_thread","Planning...");

	      //run planner
	      planner_plan_->clear();
	      bool gotPlan = n.ok() && makePlan(temp_goal, *planner_plan_);

	      if(gotPlan)
	      {
	        ROS_DEBUG_NAMED("move_robot_plan_thread","Got Plan with %zu points!", planner_plan_->size());
	        //pointer swap the plans under mutex (the controller will pull from latest_plan_)
	        std::vector<geometry_msgs::PoseStamped>* temp_plan = planner_plan_;

	        lock.lock();
	        planner_plan_ = latest_plan_;
	        latest_plan_ = temp_plan;
	        last_valid_plan_ = ros::Time::now();
	        new_global_plan_ = true;

	        ROS_DEBUG_NAMED("move_robot_plan_thread","Generated a plan from the base_global_planner");

	        if(planner_frequency_ <= 0)
	          runPlanner_ = false;
	        lock.unlock();
	      }      
        

	        //take the mutex for the next iteration
	        lock.lock();

		    
		}
    }

    bool MoveRobot::makePlan(const geometry_msgs::PoseStamped& goal, std::vector<geometry_msgs::PoseStamped>& plan)
    {
		boost::unique_lock<costmap_2d::Costmap2D::mutex_t> lock(*(planner_costmap_ros_->getCostmap()->getMutex()));
		//make sure to set the plan to be empty initially
		plan.clear();
		//since this gets called on handle activate
		if(planner_costmap_ros_ == NULL) 
		{
			ROS_ERROR("Planner costmap ROS is NULL, unable to create global plan");
			return false;
		}
		//get the starting pose of the robot
		tf::Stamped<tf::Pose> global_pose;

		if(!planner_costmap_ros_->getRobotPose(global_pose)) 
		{
			ROS_WARN("Unable to get starting pose of robot, unable to create global plan");
			return false;
		}
		geometry_msgs::PoseStamped start;
		tf::poseStampedTFToMsg(global_pose, start);
		//if the planner fails or returns a zero length plan, planning failed
		if(!planner_->makePlan(start, goal, plan) || plan.empty())
		{
			ROS_DEBUG_NAMED("move_base","Failed to find a plan to point (%.2f, %.2f)", goal.pose.position.x, goal.pose.position.y);
			return false;
		}

		return true;
	}

	void MoveRobot::goalCB(const geometry_msgs::PoseStamped::ConstPtr& goal)
	{
		ROS_DEBUG_NAMED("move_base","In ROS goal callback, wrapping the PoseStamped in the action message and re-sending to the server.");
		move_base_msgs::MoveBaseActionGoal action_goal;
		action_goal.header.stamp = ros::Time::now();
		action_goal.goal.target_pose = *goal;
		action_goal_pub_.publish(action_goal);
	}


    void MoveRobot::executeCb(const move_base_msgs::MoveBaseGoalConstPtr& move_base_goal)
	{
		if(!isQuaternionValid(move_base_goal->target_pose.pose.orientation))
		{
			as_->setAborted(move_base_msgs::MoveBaseResult(), "Aborting on goal because it was sent with an invalid quaternion");
			return;
		}

		geometry_msgs::PoseStamped goal = goalToGlobalFrame(move_base_goal->target_pose);

		//we have a goal so start the planner
		boost::unique_lock<boost::mutex> lock(planner_mutex_);
		planner_goal_ = goal;
		runPlanner_ = true;
		planner_cond_.notify_one();
		lock.unlock();
		current_goal_pub_.publish(goal);
		std::vector<geometry_msgs::PoseStamped> global_plan;
		ros::Rate r(controller_frequency_);
		
		if(shutdown_costmaps_)
		{
			ROS_DEBUG_NAMED("move_base","Starting up costmaps that were shut down previously");
			planner_costmap_ros_->start();
			controller_costmap_ros_->start();
		}

		//we want to make sure that we reset the last time we had a valid plan and control
		last_valid_control_ = ros::Time::now();
		last_valid_plan_ = ros::Time::now();
		last_oscillation_reset_ = ros::Time::now();
		ros::NodeHandle n;

		while(n.ok())
		{
			if(c_freq_change_)
			{
				ROS_INFO("Setting controller frequency to %.2f", controller_frequency_);
				r = ros::Rate(controller_frequency_);
				c_freq_change_ = false;
			}

			if(as_->isPreemptRequested())
			{
				if(as_->isNewGoalAvailable())
				{
					//if we're active and a new goal is available, we'll accept it, but we won't shut anything down
					move_base_msgs::MoveBaseGoal new_goal = *as_->acceptNewGoal();
					if(!isQuaternionValid(new_goal.target_pose.pose.orientation))
					{
						as_->setAborted(move_base_msgs::MoveBaseResult(), "Aborting on goal because it was sent with an invalid quaternion");
						return;
					}

					goal = goalToGlobalFrame(new_goal.target_pose);

					//we have a new goal so make sure the planner is awake
					lock.lock();
					planner_goal_ = goal;
					runPlanner_ = true;
					planner_cond_.notify_one();
					lock.unlock();

					//publish the goal point to the visualizer
					ROS_DEBUG_NAMED("move_base","move_base has received a goal of x: %.2f, y: %.2f", goal.pose.position.x, goal.pose.position.y);
					current_goal_pub_.publish(goal);
					//make sure to reset our timeouts
					last_valid_control_ = ros::Time::now();
					last_valid_plan_ = ros::Time::now();
					last_oscillation_reset_ = ros::Time::now();
				}

				else 
				{
					//if we've been preempted explicitly we need to shut things down
					resetState();
					//notify the ActionServer that we've successfully preempted
					ROS_DEBUG_NAMED("move_base","Move base preempting the current goal");
					as_->setPreempted();
					//we'll actually return from execute after preempting
					return;
				}
			}

			if(goal.header.frame_id != planner_costmap_ros_->getGlobalFrameID())
			{
				goal = goalToGlobalFrame(goal);
				
				//we have a new goal so make sure the planner is awake
				lock.lock();
				planner_goal_ = goal;
				runPlanner_ = true;
				planner_cond_.notify_one();
				lock.unlock();
				//publish the goal point to the visualizer
				ROS_DEBUG_NAMED("move_base","The global frame for move_base has changed, new frame: %s, new goal position x: %.2f, y: %.2f", goal.header.frame_id.c_str(), goal.pose.position.x, goal.pose.position.y);
				current_goal_pub_.publish(goal);
				//make sure to reset our timeouts
				last_valid_control_ = ros::Time::now();
				last_valid_plan_ = ros::Time::now();
				last_oscillation_reset_ = ros::Time::now();
			}			
			
			//for timing that gives real time even in simulation
			ros::WallTime start = ros::WallTime::now();
			//the real work on pursuing a goal is done here
			bool done = executeCycle(goal, global_plan);
			
			//if we're done, then we'll return from execute
			if(done)
				return;

			//check if execution of the goal has completed in some way
			ros::WallDuration t_diff = ros::WallTime::now() - start;
			ROS_DEBUG_NAMED("move_robot","Full control cycle time: %.9f\n", t_diff.toSec());

			r.sleep();
			//make sure to sleep for the remainder of our cycle time
			if(r.cycleTime() > ros::Duration(1 / controller_frequency_))
			{
				ROS_WARN("Control loop missed its desired rate of %.4fHz... the loop actually took %.4f seconds", controller_frequency_, r.cycleTime().toSec());
			}

		}

		//wake up the planner thread so that it can exit cleanly
		lock.lock();
		runPlanner_ = true;
		planner_cond_.notify_one();
		lock.unlock();
		//if the node is killed then we'll abort and return
		as_->setAborted(move_base_msgs::MoveBaseResult(), "Aborting on the goal because the node has been killed");
		return;
	}


	bool MoveRobot::executeCycle(geometry_msgs::PoseStamped& goal, std::vector<geometry_msgs::PoseStamped>& global_plan)
	{
	}

  
    bool MoveRobot::isQuaternionValid(const geometry_msgs::Quaternion& q)
    {
		//first we need to check if the quaternion has nan's or infs
		if(!std::isfinite(q.x) || !std::isfinite(q.y) || !std::isfinite(q.z) || !std::isfinite(q.w))
		{
		  ROS_ERROR("Quaternion has nans or infs... discarding as a navigation goal");
		  return false;
		}
		tf::Quaternion tf_q(q.x, q.y, q.z, q.w);
		//next, we need to check if the length of the quaternion is close to zero
		if(tf_q.length2() < 1e-6)
		{
		  ROS_ERROR("Quaternion has length close to zero... discarding as navigation goal");
		  return false;
		}
		//next, we'll normalize the quaternion and check that it transforms the vertical vector correctly
		tf_q.normalize();
		tf::Vector3 up(0, 0, 1);
		double dot = up.dot(up.rotate(tf_q.getAxis(), tf_q.getAngle()));
		if(fabs(dot - 1) > 1e-3)
		{
		  ROS_ERROR("Quaternion is invalid... for navigation the z-axis of the quaternion must be close to vertical.");
		  return false;
		}

		return true;
	}


	geometry_msgs::PoseStamped MoveRobot::goalToGlobalFrame(const geometry_msgs::PoseStamped& goal_pose_msg){
		std::string global_frame = planner_costmap_ros_->getGlobalFrameID();
		tf::Stamped<tf::Pose> goal_pose, global_pose;
		poseStampedMsgToTF(goal_pose_msg, goal_pose);
		//just get the latest available transform... for accuracy they should send
		//goals in the frame of the planner
		goal_pose.stamp_ = ros::Time();
		try{
		tf_.transformPose(global_frame, goal_pose, global_pose);
		}
		catch(tf::TransformException& ex){
		ROS_WARN("Failed to transform the goal pose from %s into the %s frame: %s",
		goal_pose.frame_id_.c_str(), global_frame.c_str(), ex.what());
		return goal_pose_msg;
		}
		geometry_msgs::PoseStamped global_pose_msg;
		tf::poseStampedTFToMsg(global_pose, global_pose_msg);
		return global_pose_msg;
	}


	void MoveRobot::resetState()
	{
    
    }



};